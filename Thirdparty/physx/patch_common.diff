PATCHED: Define DISABLE_CUDA_PHYSX added into PxPreprocessor.h to disable CUDA. Enable __STDC_LIMIT_MACROS in PxSimpleTypes.h for Android. Added methods for accessing private member required for sync over a network. Removed quaternion renormalization to improve resimulations.


diff -ur ./PhysX-3.4-master_original/PhysX_3.4/Include/vehicle/PxVehicleWheels.h ./PhysX-3.4-master/PhysX_3.4/Include/vehicle/PxVehicleWheels.h
--- ./PhysX-3.4-master_original/PhysX_3.4/Include/vehicle/PxVehicleWheels.h	2017-04-25 14:02:08.000000000 +0300
+++ ./PhysX-3.4-master/PhysX_3.4/Include/vehicle/PxVehicleWheels.h	2018-03-18 17:34:47.000000000 +0300
@@ -548,6 +548,10 @@
 	PxVehicleWheelsDynData(){}
 	~PxVehicleWheelsDynData(){}
 
+	void getWheels4InternalJounces(PxReal* outJounces);
+
+	void setWheels4InternalJounces(PxReal* inJounces);
+
 	/**
 	\brief Set all wheels to their rest state.
 	@see setup
@@ -579,10 +583,14 @@
 	*/
 	void setWheelRotationSpeed(const PxU32 wheelIdx, const PxReal speed);
 
+	void setWheelRotationSpeed(const PxU32 wheelIdx, const PxReal speed, const PxReal correctedSpeed);
+
 	/**
 	\brief Return the rotation speed about the rolling axis of a specified wheel .
 	*/
 	PxReal getWheelRotationSpeed(const PxU32 wheelIdx) const;
+
+	void getWheelRotationSpeed(const PxU32 wheelIdx, PxReal& speedOut, PxReal& correctedSpeedOut) const;
 	
 	/**
 	\brief Set the wheel rotation angle (radians) about the rolling axis of the specified wheel.
diff -ur ./PhysX-3.4-master_original/PhysX_3.4/Source/PhysX/src/NpRigidDynamic.cpp ./PhysX-3.4-master/PhysX_3.4/Source/PhysX/src/NpRigidDynamic.cpp
--- ./PhysX-3.4-master_original/PhysX_3.4/Source/PhysX/src/NpRigidDynamic.cpp	2017-04-25 14:02:08.000000000 +0300
+++ ./PhysX-3.4-master/PhysX_3.4/Source/PhysX/src/NpRigidDynamic.cpp	2018-03-18 17:37:34.000000000 +0300
@@ -78,10 +78,8 @@
 	if(scene)
 		updateDynamicSceneQueryShapes(mShapeManager, scene->getSceneQueryManagerFast());
 
-	const PxTransform newPose = pose.getNormalized();	//AM: added to fix 1461 where users read and write orientations for no reason.
-	
 	Scb::Body& b = getScbBodyFast();
-	const PxTransform body2World = newPose * b.getBody2Actor();
+	const PxTransform body2World = pose * b.getBody2Actor();
 	b.setBody2World(body2World, false);
 
 	// invalidate the pruning structure if the actor bounds changed
@@ -157,11 +155,9 @@
 	PX_CHECK_AND_RETURN(pose.isSane(), "PxRigidDynamic::setCMassLocalPose pose is not valid.");
 	NP_WRITE_CHECK(NpActor::getOwnerScene(*this));
 
-	const PxTransform p = pose.getNormalized();
-
 	const PxTransform oldBody2Actor = getScbBodyFast().getBody2Actor();
 
-	NpRigidDynamicT::setCMassLocalPoseInternal(p);
+	NpRigidDynamicT::setCMassLocalPoseInternal(pose);
 
 	Scb::Body& b = getScbBodyFast();
 	if(b.getFlags() & PxRigidBodyFlag::eKINEMATIC)
diff -ur ./PhysX-3.4-master_original/PhysX_3.4/Source/PhysX/src/NpShape.cpp ./PhysX-3.4-master/PhysX_3.4/Source/PhysX/src/NpShape.cpp
--- ./PhysX-3.4-master_original/PhysX_3.4/Source/PhysX/src/NpShape.cpp	2017-04-25 14:02:08.000000000 +0300
+++ ./PhysX-3.4-master/PhysX_3.4/Source/PhysX/src/NpShape.cpp	2018-03-18 17:35:53.000000000 +0300
@@ -346,7 +346,7 @@
 	PX_CHECK_AND_RETURN(isWritable(), "PxShape::setLocalPose: shared shapes attached to actors are not writable.");
 	NP_WRITE_CHECK(getOwnerScene());
 
-	mShape.setShape2Actor(newShape2Actor.getNormalized());
+	mShape.setShape2Actor(newShape2Actor);
 
 	updateSQ("PxShape::setLocalPose: Shape is a part of pruning structure, pruning structure is now invalid!");
 }
diff -ur ./PhysX-3.4-master_original/PhysX_3.4/Source/PhysXVehicle/src/PxVehicleWheels.cpp ./PhysX-3.4-master/PhysX_3.4/Source/PhysXVehicle/src/PxVehicleWheels.cpp
--- ./PhysX-3.4-master_original/PhysX_3.4/Source/PhysXVehicle/src/PxVehicleWheels.cpp	2017-04-25 14:02:08.000000000 +0300
+++ ./PhysX-3.4-master/PhysX_3.4/Source/PhysXVehicle/src/PxVehicleWheels.cpp	2018-03-18 17:34:47.000000000 +0300
@@ -517,6 +517,30 @@
 	return true;
 }
 
+void PxVehicleWheelsDynData::getWheels4InternalJounces(PxReal* outJounces)
+{
+	PX_ASSERT(mWheels4DynData != NULL);
+	for(PxU32 i=0;i<mNbWheels4;i++)
+	{
+		outJounces[i * 4 + 0]  = mWheels4DynData[i].mJounces[0];
+		outJounces[i * 4 + 1]  = mWheels4DynData[i].mJounces[1];
+		outJounces[i * 4 + 2]  = mWheels4DynData[i].mJounces[2];
+		outJounces[i * 4 + 3]  = mWheels4DynData[i].mJounces[3];
+	}
+}
+
+void PxVehicleWheelsDynData::setWheels4InternalJounces(PxReal* inJounces)
+{
+	PX_ASSERT(mWheels4DynData != NULL);
+	for(PxU32 i=0;i<mNbWheels4;i++)
+	{
+		mWheels4DynData[i].mJounces[0] = inJounces[i * 4 + 0];
+		mWheels4DynData[i].mJounces[1] = inJounces[i * 4 + 1];
+		mWheels4DynData[i].mJounces[2] = inJounces[i * 4 + 2];
+		mWheels4DynData[i].mJounces[3] = inJounces[i * 4 + 3];
+	}
+}
+
 void PxVehicleWheelsDynData::setToRestState()
 {
 	//Set susp/wheel/tires to rest state.
@@ -552,6 +576,14 @@
 	suspWheelTire4.mCorrectedWheelSpeeds[wheelIdx & 3] = speed;
 }
 
+void PxVehicleWheelsDynData::setWheelRotationSpeed(const PxU32 wheelIdx, const PxReal speed, const PxReal correctedSpeed)
+{
+	PX_CHECK_AND_RETURN(wheelIdx < mNbActiveWheels, "PxVehicleWheelsDynData::setWheelRotationSpeed(speed, correctedSpeed) - Illegal wheel");
+	PxVehicleWheels4DynData& suspWheelTire4=mWheels4DynData[(wheelIdx>>2)];
+	suspWheelTire4.mWheelSpeeds[wheelIdx & 3] = speed;
+	suspWheelTire4.mCorrectedWheelSpeeds[wheelIdx & 3] = correctedSpeed;
+}
+
 PxReal PxVehicleWheelsDynData::getWheelRotationSpeed(const PxU32 wheelIdx) const
 {
 	PX_CHECK_AND_RETURN_VAL(wheelIdx < mNbActiveWheels, "PxVehicleWheelsDynData::getWheelRotationSpeed - Illegal wheel", 0.0f);
@@ -559,6 +591,14 @@
 	return suspWheelTire4.mCorrectedWheelSpeeds[wheelIdx & 3];
 }
 
+void PxVehicleWheelsDynData::getWheelRotationSpeed(const PxU32 wheelIdx, PxReal& speedOut, PxReal& correctedSpeedOut) const
+{
+	PX_CHECK_AND_RETURN(wheelIdx < mNbActiveWheels, "PxVehicleWheelsDynData::getWheelRotationSpeed(speedOut, correctedSpeedOut) - Illegal wheel");
+	const PxVehicleWheels4DynData& suspWheelTire4=mWheels4DynData[(wheelIdx>>2)];
+	speedOut = suspWheelTire4.mWheelSpeeds[wheelIdx & 3];
+	correctedSpeedOut = suspWheelTire4.mCorrectedWheelSpeeds[wheelIdx & 3];
+}
+
 void PxVehicleWheelsDynData::setWheelRotationAngle(const PxU32 wheelIdx, const PxReal angle)
 {
 	PX_CHECK_AND_RETURN(wheelIdx < mNbActiveWheels, "PxVehicleWheelsDynData::setWheelRotationAngle - Illegal wheel");
diff -ur ./PhysX-3.4-master_original/PxShared/include/foundation/PxPreprocessor.h ./PhysX-3.4-master/PxShared/include/foundation/PxPreprocessor.h
--- ./PhysX-3.4-master_original/PxShared/include/foundation/PxPreprocessor.h	2017-04-25 14:02:08.000000000 +0300
+++ ./PhysX-3.4-master/PxShared/include/foundation/PxPreprocessor.h	2018-03-18 17:34:47.000000000 +0300
@@ -30,6 +30,8 @@
 #ifndef PXFOUNDATION_PXPREPROCESSOR_H
 #define PXFOUNDATION_PXPREPROCESSOR_H
 
+#define DISABLE_CUDA_PHYSX
+
 #include <stddef.h>
 #if !defined(PX_GENERATE_META_DATA)
 #include <ciso646>  
diff -ur ./PhysX-3.4-master_original/PxShared/include/foundation/PxSimpleTypes.h ./PhysX-3.4-master/PxShared/include/foundation/PxSimpleTypes.h
--- ./PhysX-3.4-master_original/PxShared/include/foundation/PxSimpleTypes.h	2017-04-25 14:02:08.000000000 +0300
+++ ./PhysX-3.4-master/PxShared/include/foundation/PxSimpleTypes.h	2018-03-18 17:34:47.000000000 +0300
@@ -44,9 +44,11 @@
 // header
 #endif
 
-#if PX_LINUX
+#if PX_LINUX || PX_ANDROID
+#ifndef __STDC_LIMIT_MACROS
 #define __STDC_LIMIT_MACROS
 #endif
+#endif
 
 #include <stdint.h>
 #if PX_VC
